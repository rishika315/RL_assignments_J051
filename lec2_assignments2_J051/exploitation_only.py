import numpy as np
from algorithms.base_algorithm import BaseMABAlgorithm

class ExploitationOnly(BaseMABAlgorithm):
    """
    Pure exploitation algorithm - always selects arm with highest estimated reward
    """
    def __init__(self, n_arms: int, **kwargs):
        super().__init__(n_arms, **kwargs)
        
    def select_arm(self) -> int:
        """
        Selects the arm with the highest estimated reward.
        If no arm has been pulled yet, selects arm 0.

        Returns:
            int: Arm index with highest estimated reward
        """
        # If all arms have 0 pulls, we haven't pulled any yet
        if np.sum(self.pulls) == 0:
            return 0
        
        # Otherwise, return the index of the arm with the highest estimated reward
        return int(np.argmax(self.estimates))
